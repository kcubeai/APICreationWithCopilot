import HeaderComponent from "@/shared/components/header";
import { useAuth } from "@/shared/utils/auth-context";
import { Button, Layout, Spin, Table, notification } from "antd";
import axios from "axios";
import moment from "moment";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
const { Content } = Layout;
export default function logs() {
    const [selectedType, setSelectedType] = useState('login_log');
    const { token } = useAuth()
    const router = useRouter();
    const handleTypeChange = async (type: string) => {
        setSelectedType(type);

    };
    const getList = async (type: string) => {
        try {

            await axios.get('/api/get-logs', { headers: { authorization: token, type } }).then((response: any) => {
                if (type == 'login_log') {
                    setLoginList(response.data.log_list)
                } else {
                    setActionList(response.data.log_list)
                }
            })
        } catch (error: any) {
            notification.error({
                message: 'Error',
                description: error.response.data.error,
                placement: 'topRight',
                duration: 3
            });
            setLoginList([]);
            setActionList([]);
        }
    }
    useEffect(() => {
        if (token == "") {
            router.push('/login')
        }
        getList(selectedType)
    }, [selectedType])
    const [dataforLogin, setLoginList] = useState<any>([]);
    const [dataforAction, setActionList] = useState<any>([])
    const columnsforLogin = [
        {
            title: 'S.No',
            dataIndex: 'serialNo',
            key: 'serialNo',
            render: (text: string, record: any, index: number) => index + 1
        },
        {
            title: 'User ID ',
            dataIndex: 'user_id',
            key: 'user_id',
        },
        {
            title: "Last Login",
            dataIndex: "last_login",
            key: "last_login",
            render: (text: string, record: any) => {
                if (record.last_login != "") {

                    var date = moment(record.last_login).format('YYYY-MM-DD HH:mm:ss');
                    return date;
                } else {
                    return ""
                }
            }
        },

    ];
    const columnsforAction = [
        {
            title: 'S.No',
            dataIndex: 'serialNo',
            key: 'serialNo',
            render: (text: string, record: any, index: number) => index + 1
        },
        {
            title: 'User ID ',
            dataIndex: 'user_id',
            key: 'user_id',
        },
        {
            title: 'Action ',
            dataIndex: 'action',
            key: 'action',
        },
        {
            title: "Changes On",
            dataIndex: "log_time",
            key: "log_time",
            render: (text: string, record: any) => {
                if (record.log_time != "") {

                    var date = moment(record.log_time).format('YYYY-MM-DD HH:mm:ss');
                    return date;
                } else {
                    return ""
                }
            }
        },

    ];
    return (
        <Layout>
            <Head>
                <title>COPILOT</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <HeaderComponent title="Activity Logs" />
            <Content style={{ padding: '50px' }}>
                <div style={{ marginBottom: '20px' }}>
                    <div style={{ marginBottom: '20px', marginTop: '20px' }}>
                        <h2>Select Log Type</h2>
                    </div>
                    <div style={{ display: 'flex', gap: '10px' }}>
                        <Button type={selectedType === 'login_log' ? 'primary' : 'default'} onClick={() => handleTypeChange('login_log')}>
                            Login Logs
                        </Button>
                        <Button type={selectedType === 'action_log' ? 'primary' : 'default'} onClick={() => handleTypeChange('action_log')}>
                            Action Logs
                        </Button>

                    </div>
                </div>


                {selectedType === 'login_log' ? (
                    <div>
                        <div style={{ marginBottom: '20px' }}>
                            <h2>Login Logs</h2>
                        </div>
                        <div>
                            {dataforLogin ? (
                                <Table dataSource={dataforLogin} columns={columnsforLogin} />
                            ) : (
                                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
                                    <Spin size="large" />
                                </div>
                            )}
                        </div>
                    </div>

                ) : null}

                {selectedType == "action_log" ?
                    (<div>
                        <div style={{ marginBottom: '20px' }}>
                            <h2>Action Logs</h2>
                        </div>
                        <div>
                            {dataforAction ? (
                                <Table dataSource={dataforAction} columns={columnsforAction} />
                            ) : (
                                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
                                    <Spin size="large" />
                                </div>
                            )}
                        </div>
                    </div>)
                    : null}

            </Content>
        </Layout>
    )
}

// export const getServerSideProps: GetServerSideProps = async (context) => {
//     var log_list: any = [];
//     await axios.get(process.env.NEXT_PUBLIC_MOCK_PATH + '/api/get-logs', { headers: { Authorization: process.env.NEXT_PUBLIC_APP_KEY, type: 'login_log' } }).then((response: any) => {
//         if (response.data.log_list && response.data.log_list.length > 0) {
//             log_list.push(response.data.log_list);

//         }

//     })
//     const data: any = { log_list }
//     console.log(log_list)
//     // Pass data to the page via props
//     return { props: { data } }
// }